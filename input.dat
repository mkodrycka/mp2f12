"""
A simple Psi4 input script to compute MP2-F12(3*C) energy

Created by: Monika Kodrycka
"""

import numpy as np
from utils import *
from integrals_helper import *
from MatricesEvaluation import *

np.set_printoptions(precision=5, linewidth=200, threshold=2000, suppress=True)

memory 2 GB
numpy_memory = 4

molecule mol {
O
H 1 R
H 1 R 2 A

R = 0.9
A = 104.5
symmetry c1
}

set globals = {
scf_type          pk
basis             cc-pvtz
df_basis_mp2      cc-pvtz-ri
e_convergence     12
d_convergence     9
maxiter           200
freeze_core       true
}

#Constants used in the program,
correlation_factor_exponent = 1.0
lindep = 1E-12

e_ref, wfn = energy('scf', return_wfn=True)
e_ref_mp2 = energy('mp2')

nocc = int(wfn.doccpi()[0])
C = np.matrix(wfn.Ca())
bs = orbital_spaces(mol, nocc, C, True, lindep)

nfocc = bs['focc'].dim()[0]
naocc = bs['aocc'].dim()[0]
nocc = bs['occ'].dim()[0]
nvir = bs['vir'].dim()[0]
nobs = bs['obs'].dim()[0]

print('\nOrbital spaces dimensions:\n')
print('  naocc: %d' % (bs['aocc'].dim()[0]))
print('   nocc: %d' % (bs['occ'].dim()[0]))
print('   nvir: %d' % (bs['vir'].dim()[0]))
print('   nobs: %d' % (bs['obs'].dim()[0]))
print('  ncabs: %d\n' % (bs['cabs'].dim()[0]))

eps = np.asarray(wfn.epsilon_a())
Eocc = eps[nfocc:nocc]
Evirt = eps[nocc:]

integrals = Integrals(bs, correlation_factor_exponent)

print('Computing MP2 energy...\n')
# Traditional MP2
E_denom = 1 / (Eocc.reshape(-1, 1, 1, 1) + Eocc.reshape(-1, 1, 1) - Evirt.reshape(-1, 1) - Evirt)
t_ijab = integrals.g('aavv') * E_denom
T_ijab = 2 * t_ijab - t_ijab.swapaxes(2,3)
e_mp2 = np.einsum('ijab,ijab->', integrals.g('aavv'), T_ijab)


print('Computing F12 correction...\n')

V = Compute_V(bs, correlation_factor_exponent)

e_f12_V = 0.0
for i in range(naocc):
        for j in range(naocc):
            e_f12_V += (5.0/8.0) * V[i,j,i,j]
            e_f12_V -= (1.0/8.0) * V[j,i,i,j]


X = Compute_X(bs, correlation_factor_exponent)
f, B, C = Compute_BC(bs, correlation_factor_exponent)


e_f12_X = 0.0
for i in range(naocc):
        for j in range(naocc):
                e_f12_X += (f[nfocc+i,nfocc+i] + f[nfocc+j,nfocc+j]) * (7.0/32.0) * X[i,j,i,j]
                e_f12_X += (f[nfocc+i,nfocc+i] + f[nfocc+j,nfocc+j]) * (1.0/32.0) * X[i,j,j,i]


e_f12_B = 0.0
for i in range(naocc):
        for j in range(naocc):
                e_f12_B += (7.0/32.0) * B[i,j,i,j]
                e_f12_B += (1.0/32.0) * B[i,j,j,i]

e_f12 = 2*e_f12_V + e_f12_B - e_f12_X


# Print the results
print('\nMP2-F12 with fixed amplitudes:\n')
print('                  SCF energy: %16.9f' % (e_ref))
print('      MP2 correlation energy: %16.9f' % (e_mp2))
print('      F12 correlation energy: %16.9f' % (e_f12))
print('  MP2-F12 correlation energy: %16.9f' % (e_mp2 + e_f12))
print('        MP2-F12 total energy: %16.9f' % (e_ref + e_mp2 + e_f12))
